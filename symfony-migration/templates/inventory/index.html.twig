{% extends 'base.html.twig' %}

{% block title %}Inventaire - OYSTERCULT{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .inventory-container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .inventory-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .inventory-actions {
            display: flex;
            gap: 1rem;
        }
        
        .inventory-filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            -webkit-transition: all 0.2s ease;
            -moz-transition: all 0.2s ease;
        }
        
        .filter-btn:hover, .filter-btn:focus {
            opacity: 0.9;
            outline: 2px solid #000;
            outline-offset: 2px;
        }
        
        .filter-btn.all {
            background-color: #f3f4f6;
            color: #1f2937;
        }
        
        .filter-btn.triploid {
            background-color: #8c1a39; /* Bordeaux pour triploïdes */
            color: white;
        }
        
        .filter-btn.diploid {
            background-color: #2563eb; /* Bleu pour diploïdes */
            color: white;
        }
        
        .filter-btn.active {
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.2);
        }
        
        .inventory-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .inventory-table th {
            background-color: #f9fafb;
            text-align: left;
            padding: 1rem;
            font-weight: 600;
            color: #4b5563;
        }
        
        .inventory-table td {
            padding: 1rem;
            border-top: 1px solid #e5e7eb;
        }
        
        .inventory-table tbody tr {
            background-color: white;
            transition: background-color 0.2s;
            -webkit-transition: background-color 0.2s;
            -moz-transition: background-color 0.2s;
        }
        
        .inventory-table tbody tr:hover {
            background-color: #f9fafb;
        }
        
        .item-type {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-weight: 500;
            font-size: 0.875rem;
        }
        
        .item-type.triploid {
            background-color: rgba(140, 26, 57, 0.1);
            color: #8c1a39; /* Bordeaux pour triploïdes */
        }
        
        .item-type.diploid {
            background-color: rgba(37, 99, 235, 0.1);
            color: #2563eb; /* Bleu pour diploïdes */
        }
        
        .item-quantity {
            font-weight: 600;
        }
        
        .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.25rem;
            transition: background-color 0.2s;
            -webkit-transition: background-color 0.2s;
            -moz-transition: background-color 0.2s;
            color: #6b7280;
        }
        
        .action-btn:hover, .action-btn:focus {
            background-color: #f3f4f6;
            color: #1f2937;
            outline: 2px solid #000;
            outline-offset: 2px;
        }
        
        .action-btn svg {
            width: 1.25rem;
            height: 1.25rem;
        }
        
        .pagination {
            display: flex;
            justify-content: flex-end;
            margin-top: 1.5rem;
            gap: 0.5rem;
        }
        
        .pagination-btn {
            padding: 0.5rem 0.75rem;
            border-radius: 0.25rem;
            background-color: #f3f4f6;
            border: none;
            cursor: pointer;
            font-weight: 500;
            color: #4b5563;
            transition: all 0.2s ease;
            -webkit-transition: all 0.2s ease;
            -moz-transition: all 0.2s ease;
        }
        
        .pagination-btn:hover, .pagination-btn:focus {
            background-color: #e5e7eb;
            outline: 2px solid #000;
            outline-offset: 2px;
        }
        
        .pagination-btn.active {
            background-color: #1f2937;
            color: white;
        }
        
        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        @media (max-width: 768px) {
            .inventory-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .inventory-table {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <div class="inventory-container p-6">
        <div class="inventory-header">
            <h1 class="text-3xl font-bold">Inventaire</h1>
            
            <div class="inventory-actions">
                <a href="{{ path('app_inventory_new') }}" class="bg-green-600 hover:bg-green-500 text-white px-4 py-2 rounded font-bold" aria-label="Ajouter un nouvel élément d'inventaire">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Ajouter
                </a>
                
                <a href="{{ path('app_inventory_export') }}" class="bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded font-bold" aria-label="Exporter l'inventaire">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Exporter
                </a>
            </div>
        </div>
        
        <div class="inventory-filters" role="group" aria-label="Filtres par type d'huîtres">
            <button id="filterAll" class="filter-btn all active" aria-pressed="true">
                Tous les types
            </button>
            <button id="filterTriploid" class="filter-btn triploid" aria-pressed="false" aria-label="Filtrer par huîtres triploïdes">
                Triploïdes (Plates)
            </button>
            <button id="filterDiploid" class="filter-btn diploid" aria-pressed="false" aria-label="Filtrer par huîtres diploïdes">
                Diploïdes (Creuses)
            </button>
        </div>
        
        <table class="inventory-table">
            <thead>
                <tr>
                    <th>Nom</th>
                    <th>Type</th>
                    <th>Quantité</th>
                    <th>Taille</th>
                    <th>Emplacement</th>
                    <th>Date de récolte</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for item in inventory_items %}
                    <tr data-item-type="{{ item.type == 'triploid' ? 'triploid' : 'diploid' }}">
                        <td>{{ item.name }}</td>
                        <td>
                            <span class="item-type {{ item.type == 'triploid' ? 'triploid' : 'diploid' }}">
                                {{ item.type == 'triploid' ? 'Triploïde' : 'Diploïde' }}
                            </span>
                        </td>
                        <td class="item-quantity">{{ item.quantity }}</td>
                        <td>{{ item.size ?? 'N/A' }}</td>
                        <td>{{ item.location ?? 'N/A' }}</td>
                        <td>{{ item.harvestDate ? item.harvestDate|date('d/m/Y') : 'N/A' }}</td>
                        <td class="flex gap-2">
                            <a href="{{ path('app_inventory_show', {'id': item.id}) }}" class="action-btn" aria-label="Voir les détails de {{ item.name }}">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                </svg>
                            </a>
                            
                            <a href="{{ path('app_inventory_edit', {'id': item.id}) }}" class="action-btn" aria-label="Modifier {{ item.name }}">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                            </a>
                            
                            <button type="button" class="action-btn delete-btn" data-id="{{ item.id }}" aria-label="Supprimer {{ item.name }}">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                            
                            <a href="{{ path('app_inventory_transfer', {'id': item.id}) }}" class="action-btn" aria-label="Transférer {{ item.name }} vers une table">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                                </svg>
                            </a>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="7" class="text-center py-8 text-gray-500">Aucun élément d'inventaire trouvé</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
        
        {% if inventory_items|length > 0 %}
            <div class="pagination">
                <button class="pagination-btn" id="prevPage" {% if current_page == 1 %}disabled{% endif %} aria-label="Page précédente">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                {% for i in 1..total_pages %}
                    <button class="pagination-btn {% if i == current_page %}active{% endif %}" aria-label="Page {{ i }}" aria-current="{{ i == current_page ? 'page' : 'false' }}">
                        {{ i }}
                    </button>
                {% endfor %}
                
                <button class="pagination-btn" id="nextPage" {% if current_page == total_pages %}disabled{% endif %} aria-label="Page suivante">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Filtrage par type
            const filterAll = document.getElementById('filterAll');
            const filterTriploid = document.getElementById('filterTriploid');
            const filterDiploid = document.getElementById('filterDiploid');
            const itemRows = document.querySelectorAll('tr[data-item-type]');
            
            function updateFilters(filterType) {
                // Mettre à jour l'état des boutons
                filterAll.classList.remove('active');
                filterAll.setAttribute('aria-pressed', 'false');
                filterTriploid.classList.remove('active');
                filterTriploid.setAttribute('aria-pressed', 'false');
                filterDiploid.classList.remove('active'); 
                filterDiploid.setAttribute('aria-pressed', 'false');
                
                // Activer le bouton sélectionné
                if (filterType === 'all') {
                    filterAll.classList.add('active');
                    filterAll.setAttribute('aria-pressed', 'true');
                } else if (filterType === 'triploid') {
                    filterTriploid.classList.add('active');
                    filterTriploid.setAttribute('aria-pressed', 'true');
                } else if (filterType === 'diploid') {
                    filterDiploid.classList.add('active');
                    filterDiploid.setAttribute('aria-pressed', 'true');
                }
                
                // Filtrer les lignes
                itemRows.forEach(row => {
                    if (filterType === 'all' || row.dataset.itemType === filterType) {
                        row.style.display = 'table-row';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }
            
            // Événements de clic pour les filtres
            filterAll.addEventListener('click', function() {
                updateFilters('all');
            });
            
            filterTriploid.addEventListener('click', function() {
                updateFilters('triploid');
            });
            
            filterDiploid.addEventListener('click', function() {
                updateFilters('diploid');
            });
            
            // Gestion des boutons de suppression
            const deleteButtons = document.querySelectorAll('.delete-btn');
            
            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.dataset.id;
                    if (confirm("Êtes-vous sûr de vouloir supprimer cet élément d'inventaire ?")) {
                        fetch(`/api/inventory/${itemId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '{{ csrf_token('delete-item') }}'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Supprimer la ligne du tableau
                                this.closest('tr').remove();
                                alert('Élément supprimé avec succès');
                            } else {
                                alert(`Erreur: ${data.message}`);
                            }
                        })
                        .catch(error => {
                            alert('Une erreur est survenue');
                            console.error(error);
                        });
                    }
                });
            });
            
            // Pagination
            const prevPageBtn = document.getElementById('prevPage');
            const nextPageBtn = document.getElementById('nextPage');
            const paginationButtons = document.querySelectorAll('.pagination-btn:not(#prevPage):not(#nextPage)');
            
            if (prevPageBtn) {
                prevPageBtn.addEventListener('click', function() {
                    if (!this.disabled) {
                        window.location.href = `{{ path('app_inventory_index') }}?page={{ current_page - 1 }}`;
                    }
                });
            }
            
            if (nextPageBtn) {
                nextPageBtn.addEventListener('click', function() {
                    if (!this.disabled) {
                        window.location.href = `{{ path('app_inventory_index') }}?page={{ current_page + 1 }}`;
                    }
                });
            }
            
            paginationButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const page = this.textContent.trim();
                    window.location.href = `{{ path('app_inventory_index') }}?page=${page}`;
                });
            });
        });
    </script>
{% endblock %}
